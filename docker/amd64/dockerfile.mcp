# Multi-stage Dockerfile for dify-sandbox
# Stage 1: Build stage using golang image
FROM golang:1.23-bookworm AS builder

# Install build dependencies (equivalent to install.sh for Debian)
RUN apt-get update && apt-get install -y --no-install-recommends \
    pkg-config \
    gcc \
    libseccomp-dev \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy go mod files first for better caching
COPY go.mod go.sum ./

# Download dependencies
RUN go env -w GO111MODULE=on && \
    go env -w GOPROXY=https://goproxy.cn,direct && \
    go mod download

# Copy source code
COPY . .

# Build binaries (equivalent to build_amd64.sh)
RUN rm -f internal/core/runner/python/python.so && \
    rm -f internal/core/runner/nodejs/nodejs.so && \
    rm -f /tmp/sandbox-python/python.so && \
    rm -f /tmp/sandbox-nodejs/nodejs.so

# Build Python lib
RUN echo "Building Python lib" && \
    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -o internal/core/runner/python/python.so \
    -buildmode=c-shared \
    -ldflags="-s -w" \
    cmd/lib/python/main.go

# Build Nodejs lib  
RUN echo "Building Nodejs lib" && \
    CGO_ENABLED=1 GOOS=linux GOARCH=amd64 go build \
    -o internal/core/runner/nodejs/nodejs.so \
    -buildmode=c-shared \
    -ldflags="-s -w" \
    cmd/lib/nodejs/main.go

# Build main binary
RUN echo "Building main" && \
    GOOS=linux GOARCH=amd64 go build \
    -o main \
    -ldflags="-s -w" \
    cmd/mcp-server/main.go

# Build env binary
RUN echo "Building env" && \
    GOOS=linux GOARCH=amd64 go build \
    -o env \
    -ldflags="-s -w" \
    cmd/dependencies/init.go

# Stage 2: Runtime stage using python image
FROM python:3.10-slim-bookworm

# Install runtime dependencies
RUN echo "deb http://deb.debian.org/debian testing main" > /etc/apt/sources.list && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
    libseccomp2 \
    wget \
    curl \
    xz-utils \
    zlib1g \
    expat \
    perl \
    libsqlite3-0 \
    && apt-get clean \
    && rm -rf /var/lib/apt/lists/*

# Copy binaries from builder stage
COPY --from=builder /app/main /main
COPY --from=builder /app/env /env

# Copy configuration and dependencies
COPY conf/mcp-config.yaml /conf/mcp-config.yaml
COPY dependencies/python-requirements.txt /dependencies/python-requirements.txt

# Install Python dependencies and Node.js
RUN chmod +x /main /env && \
    pip3 install --no-cache-dir httpx==0.27.2 requests==2.32.3 jinja2==3.0.3 PySocks httpx[socks] && \
    wget -O /opt/node-v20.11.1-linux-x64.tar.xz https://npmmirror.com/mirrors/node/v20.11.1/node-v20.11.1-linux-x64.tar.xz && \
    tar -xvf /opt/node-v20.11.1-linux-x64.tar.xz -C /opt && \
    ln -s /opt/node-v20.11.1-linux-x64/bin/node /usr/local/bin/node && \
    rm -f /opt/node-v20.11.1-linux-x64.tar.xz && \
    /env && \
    rm -f /env

# Set environment variables for MCP server
ENV MCP_TRANSPORT=streamable-http
ENV MCP_HTTP_PORT=3000
# BaseURL 应该在运行时通过 -e 参数指定，这里提供默认值
# 用户需要根据实际的宿主机地址或域名来设置
ENV MCP_BASE_URL=http://localhost:3000
ENV MCP_SHOW_LOG=true
ENV MCP_LOG_LEVEL=info

# Expose the MCP server port
EXPOSE 3000

ENTRYPOINT ["/main"] 